name: Deploy to prod

on:
  workflow_call:
    inputs:
      BACKEND_APPLICATION:
        required: true
        type: string
      BACKEND_ENVIRONMENT:
        required: true
        type: string
      WORKER_APPLICATION:
        required: true
        type: string
      WORKER_ENVIRONMENT:
        required: true
        type: string
      BUCKET:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID_PROD:
        required: true
      AWS_SECRET_ACCESS_KEY_PROD:
        required: true    
      NPM_TOKEN:
        required: true
      NEW_RELIC_APPLICATION_ID_PROD:
        required: true
      NEW_RELIC_WORKER_ID_PROD:
        required: true

jobs:
  ci:
    if: ${{ github.event.pull_request.merged == true }} 
    name: ci
    runs-on: ubuntu-latest
    timeout-minutes: 60    
    strategy:
      matrix:
        node-version: [14.x]
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Code build
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Run lint
      run: npm run lint

  cd:
    needs: ci
    if: ${{ github.event.pull_request.merged == true }} 
    name: cd to prod
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: production
    strategy:
      matrix:
        node-version: [14.x]
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      WORKER_APPLICATION: Membrane-Worker-prod
      WORKER_ENVIRONMENT: membrane-worker-prod
      BACKEND_APPLICATION: Membrane-prod
      BACKEND_ENVIRONMENT: membrane-prod
      BUCKET: elasticbeanstalk-us-east-2-133452444714
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: dev-releases-prod
        status: STARTED
        color: good
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
  
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: delete default cron
      run: rm -f cron.yaml

    - name: Select and set cron into code
      run: cat cron-prod.yml > cron.yaml

    - name: Replace Token in .npmrc
      run: sed -i 's/\${NPM_TOKEN}/${{ secrets.NPM_TOKEN }}/g' .npmrc
      
    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*'
          
    - name: Code build
      run: npm ci

    - name: Deploy Backend application to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        application_name: ${{ inputs.BACKEND_APPLICATION }}
        environment_name: ${{ inputs.BACKEND_ENVIRONMENT }}
        version_label: ${{ github.sha }}
        wait_for_environment_recovery: 120
        wait_for_deployment: false
        region: us-east-2
        deployment_package: deploy.zip
        existing_bucket_name: ${{ inputs.BUCKET }}
        use_existing_version_if_available: true

    - name: Deploy Worker application to EB 
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        application_name: ${{ inputs.WORKER_APPLICATION }}
        environment_name: ${{ inputs.WORKER_ENVIRONMENT }}
        wait_for_environment_recovery: 120
        wait_for_deployment: false
        version_label: ${{ github.sha }}
        region: us-east-2
        deployment_package: deploy.zip
        existing_bucket_name: ${{ inputs.BUCKET }}
        use_existing_version_if_available: true

    - name: Create New Relic deployment marker for Backend
      uses: newrelic/deployment-marker-action@v1
      with:
        accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
        apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
        applicationId: ${{ secrets.NEW_RELIC_APPLICATION_ID_PROD }}
        revision: "${{ github.ref }}-${{ github.sha }}"

    - name: Create New Relic deployment marker for Worker
      uses: newrelic/deployment-marker-action@v1
      with:
        accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
        apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
        applicationId: ${{ secrets.NEW_RELIC_WORKER_ID_PROD }}
        revision: "${{ github.ref }}-${{ github.sha }}"

    - name: Notify slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: dev-releases-prod
        status: SUCCESS
        color: good

    - name: Notify slack fail
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: dev-releases-prod
        status: FAILED
        color: danger

  publish-release:
    needs: cd
    name: publish-new-version-release
    runs-on: ubuntu-latest
    steps:
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: '${{ github.event.pull_request.title }}'

      - name: Extract version from branch name
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"

      - name: Create Release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ steps.split.outputs._2 }}
          name: ${{ steps.split.outputs._2 }}
          draft: false
          prerelease: false

      - name: Merge main into staging branch
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: staging
          title: Merge main into staging branch
          body: |
            This PR merges the main branch back into staging.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the staging branch.

      - name: Merge main into develop branch
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: develop
          title: Merge main into develop branch
          body: |
            This PR merges the main branch back into develop.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the develop branch.
   
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Publish Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          # SENTRY_URL: https://sentry.io/
        with:
          environment: lite-prod
          version: ${{ steps.split.outputs._2 }}
          