name: Deploy in AWS Elastic Container Services

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: false
        type: string
        default: us-east-2
      ECR_REPOSITORY:
        required: true
        type: string
      TASK_DEFINITION:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      GH_BRANCH_NAME:
        required: true
        type: string
      GH_ENV:
        required: true
        type: string
      GH_PR_MERGED:
        required: true
        type: boolean
      GH_SHA:
        required: true
        type: string
      GH_REF:
        required: true
        type: string
      SLACK_CHANNEL:
        required: true
        type: string
      NEW_RELIC_APPLICATION_ID:
        required: false
        type: string
      NODE_VERSION:
        required: true
        type: string
      METADATA_PACKAGE:
        required: false
        type: string
        default: package.json
      IMAGE_NAME:
        # Output from build job (see typescript-docker-build.yml)
        required: false
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCESS_KEY_ID_PROD:
        required: true
      AWS_SECRET_ACCESS_KEY_PROD:
        required: true
      NEW_RELIC_ACCOUNT_ID:
        required: false
      NEW_RELIC_API_KEY:
        required: false
      SLACK_ALARMS_TOKEN:
        required: true

jobs:
  promote-staging-to-prod:
    if: ${{ inputs.GH_PR_MERGED && inputs.GH_BRANCH_NAME == 'main' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      IMAGE_NAME: ${{ steps.promote-image.outputs.IMAGE_NAME }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main
    - name: Fetch current app version
      run: echo "VERSION=$(jq .version ${{ inputs.METADATA_PACKAGE }})" >> $GITHUB_ENV
    - name: Set repositories names
      run: echo STG_ECR_REPOSITORY=`echo ${{ inputs.ECR_REPOSITORY }} | rev | cut -d'-' -f2- | rev`-stg >> $GITHUB_ENV
      shell: bash
    - name: Promote image from staging to production
      id: promote-image
      uses: Lattice-Trade/membrane-github-template-actions/composite-actions/docker/promote-image@feature/LM-9164
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID_PROD: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        AWS_SECRET_ACCESS_KEY_PROD: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        GH_VERSION: ${{ env.VERSION }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        STG_ECR_REPOSITORY: ${{ env.STG_ECR_REPOSITORY }}

  deploy_ecs_task:
    if: |
      always() &&
      inputs.GH_PR_MERGED &&
      (needs.promote-staging-to-prod.result == 'success' || needs.promote-staging-to-prod.result == 'skipped')
    needs: promote-staging-to-prod
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: ${{ inputs.GH_ENV }}
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.GH_BRANCH_NAME }}
    - name: Login to ECR
      id: ecr-login
      uses: Lattice-Trade/membrane-github-template-actions/composite-actions/aws/ecr-login@feature/LM-9164
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
    - name: Download task definition
      env:
          TASK_DEFINITION: ${{ inputs.TASK_DEFINITION }}
      run: |
        aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@master
      with:
        task-definition: task-definition.json
        container-name: ${{ inputs.CONTAINER_NAME }}
        # One of the two will be an empty string by design
        image: ${{ needs.promote-staging-to-prod.outputs.IMAGE_NAME }}${{ inputs.IMAGE_NAME }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@master
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ inputs.ECS_SERVICE }}
    #     cluster: ${{ inputs.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    # - name: Create New Relic deployment marker
    #   uses: newrelic/deployment-marker-action@v1
    #   continue-on-error: true
    #   with:
    #     accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
    #     apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
    #     applicationId: ${{ inputs.NEW_RELIC_APPLICATION_ID }}
    #     revision: "${{ inputs.GH_REF }}-${{ inputs.GH_SHA }}"

    # - name: Notify slack success
    #   if: success()
    #   env:
    #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
    #   uses: Lattice-Trade/github-action-slack-notify-build@main
    #   with:
    #     channel: ${{ inputs.SLACK_CHANNEL }}
    #     status: SUCCESS
    #     color: good

    # - name: Notify slack fail
    #   if: failure()
    #   env:
    #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
    #   uses: Lattice-Trade/github-action-slack-notify-build@main
    #   with:
    #     channel: ${{ inputs.SLACK_CHANNEL }}
    #     status: FAILED
    #     color: danger
