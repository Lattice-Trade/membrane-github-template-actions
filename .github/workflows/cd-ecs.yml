name: Deploy in AWS Elastic Container Services

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      TASK_DEFINITION:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      GH_BRANCH_NAME:
        required: true
        type: string
      GH_ENV:
        required: true
        type: string
      GH_PR_MERGED:
        required: true
        type: boolean
      GH_SHA:
        required: true
        type: string
      GH_REF:
        required: true
        type: string
      SLACK_CHANNEL:
        required: true
        type: string
      NEW_RELIC_APPLICATION_ID:
        required: false
        type: string
      NODE_VERSION:
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCESS_KEY_ID_PROD:
        required: false
      AWS_SECRET_ACCESS_KEY_PROD:
        required: false
      NEW_RELIC_ACCOUNT_ID:
        required: false
      NEW_RELIC_API_KEY:
        required: false
      SLACK_ALARMS_TOKEN:
        required: true

jobs:
  promote-staging-to-prod:
<<<<<<< HEAD
    if: ${{ inputs.GH_PR_MERGED }} 
=======
    if: ${{ inputs.GH_PR_MERGED && inputs.GH_BRANCH_NAME == 'main' }}
>>>>>>> feecdc9 (Added image promotion workflow)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Promote image from staging to production
<<<<<<< HEAD
      # if: asdasd
=======
>>>>>>> feecdc9 (Added image promotion workflow)
      uses: Lattice-Trade/membrane-github-composite-actions/.github/workflows/docker-promote-image.yml@feature/LM-9164-step-deduplication
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID_PROD: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        AWS_SECRET_ACCESS_KEY_PROD: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
<<<<<<< HEAD
=======
        GH_VERSION: ${{ inputs.GH_VERSION }}
        ECR_NAME: ${{ inputs.ECR_NAME }}
>>>>>>> feecdc9 (Added image promotion workflow)

  deploy_ecs_task:
    if: ${{ inputs.GH_PR_MERGED }} 
    needs: promote-staging-to-prod
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: ${{ inputs.GH_ENV }} 
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 
    steps:
    - name: Login to ECR
      id: ecr-login
      uses: Lattice-Trade/membrane-github-composite-actions/aws/ecr-login@feature/LM-9164-step-deduplication
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
    - name: Code build
      run: npm ci --ignore-scripts

    - name: Build, tag, and push image to Amazon ECR
      id: build-push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ inputs.GH_SHA }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . --build-arg NPM_TOKEN=${NPM_TOKEN}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #       image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.GH_SHA }}'
    #       format: 'table'
    #       exit-code: '0'
    #       ignore-unfixed: true
    #       vuln-type: 'os,library'
    #       severity: 'CRITICAL,HIGH'
    #   env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}          
    #       AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
   
    - name: Download task definition
      env:
          TASK_DEFINITION: ${{ inputs.TASK_DEFINITION }}
      run: |
        aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@master
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ inputs.GH_SHA }}
      with:
        task-definition: task-definition.json
        container-name: ${{ inputs.CONTAINER_NAME }}
        image: ${{ steps.build-push-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@master
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ inputs.ECS_SERVICE }}
    #     cluster: ${{ inputs.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    # - name: Create New Relic deployment marker
    #   uses: newrelic/deployment-marker-action@v1
    #   continue-on-error: true
    #   with:
    #     accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
    #     apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
    #     applicationId: ${{ inputs.NEW_RELIC_APPLICATION_ID }}
    #     revision: "${{ inputs.GH_REF }}-${{ inputs.GH_SHA }}"

    # - name: Notify slack success
    #   if: success()
    #   env:
    #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
    #   uses: Lattice-Trade/github-action-slack-notify-build@main
    #   with:
    #     channel: ${{ inputs.SLACK_CHANNEL }}
    #     status: SUCCESS
    #     color: good

    # - name: Notify slack fail
    #   if: failure()
    #   env:
    #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
    #   uses: Lattice-Trade/github-action-slack-notify-build@main
    #   with:
    #     channel: ${{ inputs.SLACK_CHANNEL }}
    #     status: FAILED
    #     color: danger
