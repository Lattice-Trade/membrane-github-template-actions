name: "Implement new release"

on:
  workflow_call:
    inputs:
      BACKEND_APPLICATION:
        required: true
        type: string
      BACKEND_ENVIRONMENT:
        required: true
        type: string
      WORKER_APPLICATION:
        required: true
        type: string
      WORKER_ENVIRONMENT:
        required: true
        type: string
      BUCKET:
        required: true
        type: string
      GH_BRANCH:
        required: true
        type: string
      GH_VERSION:
        required: true
        type: string
      GH_SHA:
        required: true
        type: string
      GH_REF:
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      NEW_RELIC_ACCOUNT_ID:
        required: true
      NEW_RELIC_API_KEY:
        required: true
      NEW_RELIC_APPLICATION_ID:
        required: true
      NEW_RELIC_WORKER_ID:
        required: true
      SLACK_ALARMS_TOKEN:
        required: true
      GITHUB_TOKEN:
        required: true     
                
jobs:
  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.GH_BRANCH }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release branch
        run: |
          git checkout -b release/${{ inputs.GH_VERSION }} ${{ inputs.GH_BRANCH }}
          git status

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Merge from main
        run: |
          git merge origin/main

      - name: Bump version in package.json
        run: yarn version --new-version ${{ inputs.GH_VERSION }} --no-git-tag-version

      - name: Commit manifest files
        id: make-commit
        run: |
          git add package.json
          git commit --message "Prepare release ${{ inputs.GH_VERSION }}"

          echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Push new branch release
        run: git push origin release/${{ inputs.GH_VERSION }}

      - name: Push new branch hotfix
        run: |
          git checkout -b hotfix/${{ inputs.GH_VERSION }} release/${{ inputs.GH_VERSION }}
          git push origin hotfix/${{ inputs.GH_VERSION }}

      - name: Create PR release to main
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ inputs.GH_VERSION }}
          base: main
          title: Pre-release version ${{ inputs.GH_VERSION }}
          reviewers: ${{ github.actor }}
          body: |
            Hi @${{ github.actor }}!

            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}.

            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

      - name: Create PR release to staging for backport
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ inputs.GH_VERSION }}
          base: staging
          title: Backport version ${{ inputs.GH_VERSION }}
          reviewers: ${{ github.actor }}
          body: |
            Hi @${{ github.actor }}!

            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}.

            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

  ci:
    #if: ${{ github.event.review.state == 'approved' }}
    needs: draft-new-release
    name: ci
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        node-version: [14.x]
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}        
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          ref: release/${{ inputs.GH_VERSION }}
    
    - name: Use cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Code build
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Run lint
      run: npm run lint

  cd:
    #if: ${{ github.event.review.state == 'approved' }}
    needs: ci
    name: pre-release to staging
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: staging
    strategy:
      matrix:
        node-version: [14.x]
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      WORKER_APPLICATION: Membrane-Worker-lite-staging
      WORKER_ENVIRONMENT: membrane-worker-lite-staging
      BACKEND_APPLICATION: Membrane-lite-staging
      BACKEND_ENVIRONMENT: membrane-lite-staging
      BUCKET: elasticbeanstalk-us-east-2-162052088493
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          ref: release/${{ inputs.GH_VERSION }}

    - uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: dev-releases
        status: STARTED
        color: good
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Generate swagger doc
      run: npx swagger-inline './**.js' --base ./swaggerBase.yaml > swaggerDoc.yaml

    - name: Generate index.html docs
      run: npx redoc-cli@0.13.2 bundle swaggerDoc.yaml --output docs/index.html

    - name: delete default cron
      run: rm -f cron.yaml

    - name: Select and set cron into code
      run: cat cron-staging.yml > cron.yaml
    
    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*'
      
    - name: Code build
      run: npm ci

    - name: Deploy Backend application to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ inputs.BACKEND_APPLICATION }}
        environment_name: ${{ inputs.BACKEND_ENVIRONMENT }}
        version_label: ${{ inputs.GH_SHA }}
        wait_for_environment_recovery: 120
        wait_for_deployment: false
        region: us-east-2
        deployment_package: deploy.zip
        existing_bucket_name: ${{ inputs.BUCKET }}
        use_existing_version_if_available: true

    - name: Deploy Worker application to EB 
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ inputs.WORKER_APPLICATION }}
        environment_name: ${{ inputs.WORKER_ENVIRONMENT }}
        version_label: ${{ inputs.GH_SHA }}
        wait_for_deployment: false
        wait_for_environment_recovery: 120
        region: us-east-2
        deployment_package: deploy.zip
        existing_bucket_name: ${{ inputs.BUCKET }}
        use_existing_version_if_available: true
    
    - name: Create New Relic deployment marker for Backend
      uses: newrelic/deployment-marker-action@v1
      with:
        accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
        apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
        applicationId: ${{ secrets.NEW_RELIC_APPLICATION_ID }}
        revision: "${{ inputs.GH_REF }}-${{ inputs.GH_SHA }}"

    - name: Create New Relic deployment marker for Worker
      uses: newrelic/deployment-marker-action@v1
      with:
        accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
        apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
        applicationId: ${{ secrets.NEW_RELIC_WORKER_ID }}
        revision: "${{ inputs.GH_REF }}-${{ inputs.GH_SHA }}"

    - name: Notify slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: dev-releases
        status: SUCCESS
        color: good

    - name: Notify slack fail
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_ALARMS_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        channel: dev-releases
        status: FAILED
        color: danger