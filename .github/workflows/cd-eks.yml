name: Deploy in AWS Elastic Container Services

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ECR_NAME:
        required: true
        type: string
      GH_BRANCH_NAME:
        required: true
        type: string
      GH_ENV:
        required: true
        type: string
      GH_PR_MERGED:
        required: true
        type: boolean
      GH_SHA:
        required: true
        type: string
      GH_REF:
        required: true
        type: string
      SLACK_CHANNEL:
        required: true
        type: string
      NEW_RELIC_APPLICATION_ID:
        required: false
        type: string
      NODE_VERSION:
        required: true
        type: string
      GH_VERSION:
        required: false
        type: string
    outputs:
      IMAGE_NAME:
        description: "The image name"
        value: ${{ jobs.cd.outputs.IMAGE_NAME }}
      IMAGE_TAG_DEV:
        description: "The image tag develop"
        value: ${{ jobs.cd.outputs.IMAGE_TAG_DEV }}
      IMAGE_TAG_STG:
        description: "The image tag staging"
        value: ${{ jobs.cd.outputs.IMAGE_TAG_STG }}

jobs:
  promote-staging-to-prod:
    if: ${{ inputs.GH_PR_MERGED && inputs.GH_BRANCH_NAME == 'main' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main
    - name: Fetch current app version
      id: version
      run: echo "OUTPUT=$(jq .version ${{ inputs.METADATA_PACKAGE }})" >> $GITHUB_ENV
    - name: Promote image from staging to production
      uses: Lattice-Trade/membrane-github-template-actions/.github/workflows/docker-promote-image.yml@feature/LM-9164
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID_PROD: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        AWS_SECRET_ACCESS_KEY_PROD: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        GH_VERSION: ${{ steps.version.OUTPUT }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}